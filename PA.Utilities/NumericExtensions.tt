﻿<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>



using System;

namespace PA.Utilities
{
    public static class NumericExtensions
    {

<# 
    foreach(string t in new string[] { "float","double" })
    {  
#>

        public static bool NearlyEquals(this <#= t #> a, <#= t #> b)
        {

            var absA = Math.Abs(a);
            var absB = Math.Abs(b);
            var diff = Math.Abs(a - b);

            if (a.CompareTo(b) == 0)
            { // shortcut, handles infinities
                return true;
            }
            else if (a.CompareTo(0f) == 0 || b.CompareTo(0f) == 0 || diff < <#= t #>.MinValue)
            {
                // a or b is zero or both are extremely close to it
                // relative error is less meaningful here
                return diff < (<#= t #>.Epsilon * <#= t #>.MinValue);
            }
            else
            { // use relative error
                return diff / Math.Min(absA + absB, <#= t #>.MaxValue) < <#= t #>.Epsilon;
            }
        } 
 <#   
    }   
#>  
    }
}

